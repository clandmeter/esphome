esphome:
  name: esp32-warmtepomp
  comment: Mitsubishi warmtepomp

esp32:
  board: mhetesp32minikit
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "ESP-Mitsubishi"
    password: "configesp"
    
captive_portal:
    
web_server:
  port: 80

uart:
  id: mod_bus
  tx_pin: GPIO23  #D7 on the d1 mini
  rx_pin: GPIO19  #D6 on the d1 mini
  baud_rate: 9600
  stop_bits: 1
  
modbus:
  flow_control_pin: GPIO18  #D5 on the d1 mini
  id: mitsubishi1
  send_wait_time: 2000ms

modbus_controller:
  - id: mitsubishi
    ## the Modbus device addr 1  (hex: 0x01)
    address: 0x01
    modbus_id: mitsubishi1
    setup_priority: -10
    update_interval: 15s


## FC04 Input Registers (readonly)

sensor:
    ## Heat Pump Frequency – Master (FC4: 32, MA: 30033)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_heat_pump_frequency_master
    name: "Heat pump frequency – Master"
    icon: mdi:sine-wave
    address: 0x20
    unit_of_measurement: "Hz"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0

    ## DHW Temperature Drop (signed) (FC4: 50, MA: 30051)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_DHW_temperature_drop
    name: "DHW temperature drop"
    icon: mdi:thermometer-chevron-down
    address: 0x32
    unit_of_measurement: "°C"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

    ## Room Temperature – Zone 1 (signed) (FC4: 52, MA: 30053)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_room_temperature_zone_1
    name: "Room temperature - Zone 1"
    icon: mdi:home-thermometer
    address: 0x34
    unit_of_measurement: "°C"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

    ## Refrigerant Liquid Temperature (signed) (FC4: 56, MA: 30057)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_refrigerant_liquid_temperature
    name: "Refrigerant liquid temperature"
    icon: mdi:snowflake-thermometer
    address: 0x38
    unit_of_measurement: "°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01
    
    ## Outdoor Ambient Temperature (signed) (FC4: 58, MA: 30059)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_outdoor_ambient_temperature
    name: "Outdoor ambient temperature"
    icon: mdi:thermometer
    address: 0x3A
    unit_of_measurement: "°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

    ## Flow Temperature (signed) (FC4: 60, MA: 30061)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_flow_temperature
    name: "Flow temperature"
    icon: mdi:thermometer-auto
    address: 0x3C
    unit_of_measurement: "°C"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

    ## Return Temperature (signed) (FC4: 62, MA: 30063)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_return_temperature
    name: "Return temperature"
    icon: mdi:thermometer
    address: 0x3E
    unit_of_measurement: "°C"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

    ## Tank Water Temperature (signed) (FC4: 64, MA: 30065)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_tank_water_temperature
    name: "Tank water temperature"
    icon: mdi:water-thermometer
    address: 0x40
    unit_of_measurement: "°C"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

    ## Heat Pump Run Time (hours) (FC4: 79, MA: 30080)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_heat_pump_run_time
    address: 0x4F
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0

    ## Heat Pump Run Time (hours x100) (FC4: 80, MA: 30081)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_heat_pump_run_time_100
    address: 0x50
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 100

    ## Heat pump run time (calculcated)
  - platform: template
    id: mitsubishi_heat_pump_run_time
    name: "Heat pump run time"
    icon: mdi:wrench-clock
    unit_of_measurement: "hrs"
    accuracy_decimals: 0
    lambda: |-
      return id(mitsubishi_heat_pump_run_time_100).state + id(mitsubishi_heat_pump_run_time).state;
    update_interval: 60s    

    ## Last Measured Heating Energy Consumption – kWh part (FC4: 156, MA: 30157)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_heating_kwh
    address: 0x9C
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Last Measured Heating Energy Consumption – Wh part (FC4: 157, MA: 30158)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_heating_wh
    address: 0x9D
    unit_of_measurement: "Wh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Energy used heating (calculated)
  - platform: template
    id: mitsubishi_energy_used_heating
    name: "Energy used heating"
    icon: mdi:heat-wave
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    lambda: |-
      return id(mitsubishi_heating_kwh).state + (id(mitsubishi_heating_wh).state/100);
    update_interval: 60s  

    ## Last Measured Cooling Energy Consumption – kWh part (FC4: 158, MA: 30159)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_cooling_kwh
    address: 0x9E
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Last Measured Cooling Energy Consumption – Wh part (FC4: 159, MA: 30160)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_cooling_wh
    address: 0x9F
    unit_of_measurement: "Wh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Energy used cooling (calculated)
  - platform: template
    id: mitsubishi_energy_used_cooling
    name: "Energy used cooling"
    icon: mdi:snowflake
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    lambda: |-
      return id(mitsubishi_cooling_kwh).state + (id(mitsubishi_cooling_wh).state/100);
    update_interval: 60s  
  
    ## Last Measured DHW Energy Consumption – kWh part (FC4: 160, MA: 30161)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_dhw_kwh
    address: 0xA0
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Last Measured DHW Energy Consumption – Wh part (FC4: 161, MA: 30162)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_dhw_wh
    address: 0xA1
    unit_of_measurement: "Wh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Energy used DHW (calculated)
  - platform: template
    id: mitsubishi_energy_used_dhw
    name: "Energy used DHW"
    icon: mdi:water
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    lambda: |-
      return id(mitsubishi_dhw_kwh).state + (id(mitsubishi_dhw_wh).state/100);
    update_interval: 60s

    ## Last Measured Heating Energy Produced – kWh part (FC4: 166: MA: 30167)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_produced_heating_kwh
    address: 0xA6
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Last Measured Heating Energy Produced – Wh part (FC4: 167, MA: 30168)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_produced_heating_wh
    address: 0xA7
    unit_of_measurement: "Wh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Energy produced heating (calculated)
  - platform: template
    id: mitsubishi_energy_produced_heating
    name: "Energy produced heating"
    icon: mdi:heat-wave
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    lambda: |-
      return id(mitsubishi_produced_heating_kwh).state + (id(mitsubishi_produced_heating_wh).state/100);
    update_interval: 60s

    ## Last Measured Cooling Energy Produced – kWh part (FC4: 168, MA: 30169)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_produced_cooling_kwh
    address: 0xA8
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Last Measured Cooling Energy Produced – Wh part (FC4: 169, MA: 30170)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_produced_cooling_wh
    address: 0xA9
    unit_of_measurement: "Wh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Energy produced cooling (calculate)
  - platform: template
    id: mitsubishi_energy_produced_cooling
    name: "Energy produced cooling"
    icon: mdi:snowflake
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    lambda: |-
      return id(mitsubishi_produced_cooling_kwh).state + (id(mitsubishi_produced_cooling_wh).state/100);
    update_interval: 60s

    ## Last Measured DHW Energy Produced – kWh part (FC4: 170, MA: 30171)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_produced_dhw_kwh
    address: 0xAA
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Last Measured DHW Energy Produced – Wh part (FC4: 171, MA: 30172)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_produced_dhw_wh
    address: 0xAB
    unit_of_measurement: "Wh"
    device_class: energy
    state_class: total_increasing
    register_type: read
    value_type: U_WORD

    ## Energy produced DHW (calculated)
  - platform: template
    id: mitsubishi_energy_produced_dhw
    name: "Energy produced DHW"
    icon: mdi:water
    device_class: energy
    state_class: total_increasing
    unit_of_measurement: "kWh"
    accuracy_decimals: 3
    lambda: |-
      return id(mitsubishi_produced_dhw_kwh).state + (id(mitsubishi_produced_dhw_wh).state/100);
    update_interval: 60s

    ## COP heating (calculated)
  - platform: template
    id: mitsubishi_cop_heating
    name: "COP heating"
    icon: mdi:slash-forward-box
    accuracy_decimals: 2
    lambda: |-
      return (id(mitsubishi_produced_heating_kwh).state + (id(mitsubishi_produced_heating_wh).state/100)) / (id(mitsubishi_heating_kwh).state + (id(mitsubishi_heating_wh).state/100));
    update_interval: 60s    

    ## COP Cooling (calculated)
  - platform: template
    id: mitsubishi_cop_cooling
    name: "COP cooling"
    icon: mdi:slash-forward-box
    accuracy_decimals: 2
    lambda: |-
      return (id(mitsubishi_produced_cooling_kwh).state + (id(mitsubishi_produced_cooling_wh).state/100)) / (id(mitsubishi_cooling_kwh).state + (id(mitsubishi_cooling_wh).state/100));
    update_interval: 60s  

    ## COP DHW (calculated)
  - platform: template
    id: mitsubishi_cop_dhw
    name: "COP DHW"
    icon: mdi:slash-forward-box
    accuracy_decimals: 2
    lambda: |-
      return (id(mitsubishi_produced_dhw_kwh).state + (id(mitsubishi_produced_dhw_wh).state/100)) / (id(mitsubishi_dhw_kwh).state + (id(mitsubishi_dhw_wh).state/100));
    update_interval: 60s  

    ## Flow rate (FC4: 173, MA: 30174)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_flow_rate
    name: "Flow rate"
    icon: mdi:arrow-right-bold-circle
    address: 0xAD
    unit_of_measurement: "l/min"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1

    ## FC03 Holding Registers (read)

    ## Set Tank Water Temperature (signed) (FC3: 31, MA: 40031)
    ## Modified to setpoint as value is only read here
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_tank_temperature_setpoint
    name: "Tank temperature setpoint"
    icon: mdi:water-thermometer-outline
    address: 0x1F
    unit_of_measurement: "°C"
    register_type: holding
    value_type: U_WORD
    filters:
      - multiply: 0.01

    ## H/C Thermostat Target Temperature – Zone 1 (signed) (FC3: 32, MA: 40033)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_target_temperature_zone_1
    name: "H/C target temperature set - Zone 1"
    icon: mdi:home-thermometer-outline
    address: 0x20
    unit_of_measurement: "°C"
    register_type: holding
    value_type: U_WORD
    filters:
      - multiply: 0.01

    ## Flow Temperature Setpoint – Zone 1 (signed) (FC3: 85, MA: 40086)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_flow_temperature_setpoint_zone_1
    name: "Flow temperature setpoint - Zone 1"
    icon: mdi:thermometer-auto
    address: 0x55
    unit_of_measurement: "°C"
    register_type: holding
    value_type: U_WORD
    filters:
      - multiply: 0.01
    
    ## Legionella Temperature Setpoint (signed) (FC3: 89, MA: 40090)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_legionella_temperature_setpoint
    name: "Legionella temperature setpoint"
    icon: mdi:bacteria-outline
    address: 0x59
    unit_of_measurement: "°C"
    register_type: holding
    value_type: U_WORD
    filters:
      - multiply: 0.01

number:
    ## Set Tank Water Temperature (FC3: 31, MA: 40031)
    ## NOTE: check read vs write address, and is max_value correct?
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_set_tank_water_temperature
    name: "Set tank water temperature"
    icon: mdi:water-thermometer-outline
    address: 0x1F
    unit_of_measurement: "°C"
    register_type: holding
    value_type: U_WORD
    mode: box
    step: 0.5
    entity_category: config
    min_value: 30
    max_value: 61
    lambda: "return x/100;"
    write_lambda: |-
      uint16_t newtemp = x*100;
      ESP_LOGI("main", "Set tank water temperature %d", newtemp);
      // Create a modbus command item with the flow temperature as the payload
      esphome::modbus_controller::ModbusCommandItem set_payload_command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(mitsubishi, 0x1E, newtemp);
      // Submit the command to the send queue
      mitsubishi->queue_command(set_payload_command);
      return {}; 

    ## H/C Thermostat Target Temperature – Zone 1 (signed) (FC3: 32, MA: 40033)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_target_temperature_zone_1
    name: "H/C target temperature - Zone 1"
    icon: mdi:home-thermometer
    address: 0x20
    unit_of_measurement: "°C"
    register_type: holding
    value_type: U_WORD
    mode: box
    step: 0.5
    entity_category: config
    min_value: 10
    max_value: 36
    lambda: "return x/100;"
    write_lambda: |-
      uint16_t newtemp = x*100;
      ESP_LOGI("main", "Set room temperature %d", newtemp);
      // Create a modbus command item with the flow temperature as the payload
      esphome::modbus_controller::ModbusCommandItem set_payload_command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(mitsubishi, 0x20, newtemp);
      // Submit the command to the send queue
      mitsubishi->queue_command(set_payload_command);
      return {}; 

switch:
    ## Force DHW (FC3: 37, MA: 40038)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_force_dhw
    name: "Force DHW"
    icon: mdi:fire-alert
    address: 0x25
    register_type: holding
    write_lambda: |-
      uint16_t forceDHW = x;
      ESP_LOGI("main", "Force DHW %d", x);
      // Create a modbus command item with the flow temperature as the payload
      esphome::modbus_controller::ModbusCommandItem set_payload_command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(mitsubishi, 0x25, forceDHW);
      // Submit the command to the send queue
      mitsubishi->queue_command(set_payload_command);
      return {};

    ## Holiday (FC3: 38, MA: 40039)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_set_holiday_mode
    name: "Set holiday mode"
    icon: mdi:briefcase
    address: 0x26
    register_type: holding
    write_lambda: |-
      uint16_t vacation = x;
      ESP_LOGI("main", "Set holiday mode %d", x);
      // Create a modbus command item with the flow temperature as the payload
      esphome::modbus_controller::ModbusCommandItem set_payload_command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(mitsubishi, 0x26, x);
      // Submit the command to the send queue
      mitsubishi->queue_command(set_payload_command);
      return {};

    ## System ON/OFF (FC1: 1, MA: 00002)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    name: "System On/Off"
    register_type: coil
    address: 0001
    bitmask: 0
    entity_category: config
    icon: "mdi:toggle-switch"

text_sensor: 
    ## Defrost (FC4: 26, MA: 30027)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_defrost
    name: "Defrost"
    icon: mdi:snowflake-melt
    address: 0x1A
    register_type: read
    bitmask: 0
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      ESP_LOGD("main", "Value for defrost mode %d", value);
      switch (value) {
        case 0: return std::string("Off");
        case 1: return std::string("Standby");
        case 2: return std::string("Defrost");
        case 3: return std::string("Waiting restart");
        default: return std::string("Unknown");
      }
      return x;

    ## Residual heat removal (FC4: 27, MA: 30028)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_residual_heat_removal
    name: "Residual heat removal"
    icon: mdi:car-defrost-rear
    address: 0x1B
    register_type: read
    bitmask: 0
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      ESP_LOGD("main", "Value for residual heat removal %d", value);
      switch (value) {
        case 0: return std::string("Normal");
        case 1: return std::string("Prepared");
        case 2: return std::string("Residual heat removal");
        default: return std::string("Unknown");
      }
      return x;

    ## System On/Off (FC3: 25, MA: 40026)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_system_onoff
    name: "System On/Off"
    icon: mdi:power
    address: 0x19
    register_type: holding
    bitmask: 0
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      ESP_LOGD("main", "Value for system on/off %d", value);
      switch (value) {
        case 0: return std::string("Off");
        case 1: return std::string("On");
        case 2: return std::string("Emergency Run");
        case 3: return std::string("Test Run");
        default: return std::string("Unknown");
      }
      return x;
    
    ## Operating mode (FC3: 26, MA: 40027)
    ## NOTE: Seems not available for FTC4,5,6 but does seem to work
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_operating_mode
    name: "Operating mode"
    icon: mdi:message-question-outline
    address: 0x1A
    register_type: holding
    bitmask: 0
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      ESP_LOGD("main", "Value for operating mode %d", value);
      switch (value) {
        case 0: return std::string("Stop");
        case 1: return std::string("Hot Water");
        case 2: return std::string("Heating");
        case 3: return std::string("Cooling");
        case 5: return std::string("Freeze Stat");
        case 6: return std::string("Legionella");
        default: return std::string("Unknown");
      }
      return x;
      
    ## Operating Mode (DHW) (FC3: 27, MA: 40028)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_operating_mode_dhw
    name: "Operating mode (DHW)"
    icon: mdi:car-cruise-control
    address: 0x1B
    register_type: holding
    bitmask: 0
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      ESP_LOGD("main", "Value for operating mode DHW %d", value);
      switch (value) {
        case 0: return std::string("Normal");
        case 1: return std::string("Eco");
        default: return std::string("Unknown");
      }
      return x;

    ## A/C Mode – Zone 1 (FC3: 28, MA: 40029)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_ac_mode_zone_1
    name: "A/C mode - Zone 1"
    icon: mdi:sun-snowflake-variant
    address: 0x1C
    register_type: holding
    bitmask: 0
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      ESP_LOGD("main", "Value for ac mode Zone 1 %d", value);
      switch (value) {
        case 0: return std::string("Heating room temperature");
        case 1: return std::string("Heating flow temperature");
        case 2: return std::string("Heating curve");
        case 3: return std::string("Cooling room temperature");
        case 4: return std::string("Cooling flow temperature");
        case 5: return std::string("Floor Dryup");
        default: return std::string("Unknown");
      }
      return x;

    ## Heat Source Status (FC3: 80, MA: 40081)
  - platform: modbus_controller
    modbus_controller_id: mitsubishi
    id: mitsubishi_heat_source_status
    name: "Heat source status"
    icon: mdi:heating-coil
    address: 0x50
    register_type: holding
    bitmask: 0
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      ESP_LOGD("main", "Value for heat source %d", value);
      switch (value) {
        case 0: return std::string("Heatpump");
        case 1: return std::string("Screw-in heater");
        case 2: return std::string("Electric heater");
        case 3: return std::string("Screw-in heater and electric heater");
        case 4: return std::string("DHW boiler");
        default: return std::string("Unknown");
      }
      return x;

select:
    ## A/C mode – Zone 1 (FC6: 28, 40029)
  - platform: modbus_controller
    id: mitsubishi_ac_mode_zone_1
    name: "A/C mode - Zone 1"
    address: 0x1C
    optionsmap:
      "Heating room": 0
      "Heating flow": 1
      "Heating curve": 2
      "Cooling room": 3
      "Cooling flow": 4
      "Floor Dryup": 5
